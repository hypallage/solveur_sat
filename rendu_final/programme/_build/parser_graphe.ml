type token =
  | INT of (int)
  | P
  | C
  | N
  | F
  | E
  | EDGE
  | EOF
  | ZERO
  | EOL
  | TRUC

open Parsing;;
# 2 "parser_graphe.mly"

# 18 "parser_graphe.ml"
let yytransl_const = [|
  258 (* P *);
  259 (* C *);
  260 (* N *);
  261 (* F *);
  262 (* E *);
  263 (* EDGE *);
    0 (* EOF *);
  264 (* ZERO *);
  265 (* EOL *);
  266 (* TRUC *);
    0|]

let yytransl_block = [|
  257 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\003\000\004\000\004\000\004\000\002\000\002\000\
\006\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\005\000\005\000\000\000"

let yylen = "\002\000\
\002\000\001\000\007\000\001\000\002\000\002\000\002\000\001\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\001\000\004\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\021\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\000\000\009\000\001\000\007\000\000\000\016\000\010\000\
\011\000\012\000\013\000\014\000\015\000\017\000\000\000\000\000\
\000\000\000\000\004\000\020\000\003\000\000\000\000\000\000\000\
\005\000\006\000\000\000\019\000"

let yydgoto = "\002\000\
\005\000\006\000\007\000\037\000\038\000\039\000\019\000"

let yysindex = "\255\255\
\020\255\000\000\255\254\001\255\000\000\023\255\000\000\026\255\
\025\255\001\255\001\255\001\255\001\255\001\255\001\255\001\255\
\000\000\001\255\000\000\000\000\000\000\030\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\031\255\024\255\
\001\000\033\255\000\000\000\000\000\000\001\000\001\000\034\255\
\000\000\000\000\015\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\028\000\032\000\245\255\252\255\018\000\002\000"

let yytablesize = 266
let yytable = "\001\000\
\035\000\010\000\011\000\012\000\009\000\013\000\014\000\015\000\
\016\000\017\000\018\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\008\000\030\000\034\000\003\000\004\000\036\000\
\003\000\008\000\041\000\042\000\004\000\022\000\031\000\032\000\
\033\000\040\000\043\000\021\000\008\000\020\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\000\000\000\000\000\034\000\000\000\
\000\000\036\000"

let yycheck = "\001\000\
\000\000\001\001\002\001\003\001\006\001\005\001\006\001\007\001\
\008\001\009\001\010\001\010\000\011\000\012\000\013\000\014\000\
\015\000\016\000\001\000\018\000\006\001\002\001\003\001\009\001\
\002\001\008\000\038\000\039\000\003\001\005\001\001\001\001\001\
\009\001\001\001\001\001\008\000\002\001\006\000\043\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\255\255\255\255\006\001\255\255\
\255\255\009\001"

let yynames_const = "\
  P\000\
  C\000\
  N\000\
  F\000\
  E\000\
  EDGE\000\
  EOF\000\
  ZERO\000\
  EOL\000\
  TRUC\000\
  "

let yynames_block = "\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'commentaire_liste) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'suite) in
    Obj.repr(
# 24 "parser_graphe.mly"
                            (_2)
# 174 "parser_graphe.ml"
               : int list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'suite) in
    Obj.repr(
# 25 "parser_graphe.mly"
                            (_1)
# 181 "parser_graphe.ml"
               : int list))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'liste_arrete) in
    Obj.repr(
# 28 "parser_graphe.mly"
                                 ( _4::_5::_7 )
# 190 "parser_graphe.ml"
               : 'suite))
; (fun __caml_parser_env ->
    Obj.repr(
# 32 "parser_graphe.mly"
           ( [] )
# 196 "parser_graphe.ml"
               : 'liste_arrete))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'clause) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'liste_arrete) in
    Obj.repr(
# 33 "parser_graphe.mly"
                         ( _1@_2 )
# 204 "parser_graphe.ml"
               : 'liste_arrete))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'commentaire) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'liste_arrete) in
    Obj.repr(
# 34 "parser_graphe.mly"
                              ( _2 )
# 212 "parser_graphe.ml"
               : 'liste_arrete))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'commentaire) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'commentaire_liste) in
    Obj.repr(
# 40 "parser_graphe.mly"
                                  ( _2 )
# 220 "parser_graphe.ml"
               : 'commentaire_liste))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'commentaire) in
    Obj.repr(
# 41 "parser_graphe.mly"
                                  ( _1 )
# 227 "parser_graphe.ml"
               : 'commentaire_liste))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'texte) in
    Obj.repr(
# 44 "parser_graphe.mly"
             ( _2 )
# 234 "parser_graphe.ml"
               : 'commentaire))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'texte) in
    Obj.repr(
# 47 "parser_graphe.mly"
                 ( _2 )
# 241 "parser_graphe.ml"
               : 'texte))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'texte) in
    Obj.repr(
# 48 "parser_graphe.mly"
                 ( _2 )
# 248 "parser_graphe.ml"
               : 'texte))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'texte) in
    Obj.repr(
# 49 "parser_graphe.mly"
                 ( _2 )
# 255 "parser_graphe.ml"
               : 'texte))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'texte) in
    Obj.repr(
# 50 "parser_graphe.mly"
                 ( _2 )
# 262 "parser_graphe.ml"
               : 'texte))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'texte) in
    Obj.repr(
# 51 "parser_graphe.mly"
                 ( _2 )
# 269 "parser_graphe.ml"
               : 'texte))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'texte) in
    Obj.repr(
# 52 "parser_graphe.mly"
                 ( _2 )
# 276 "parser_graphe.ml"
               : 'texte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'texte) in
    Obj.repr(
# 53 "parser_graphe.mly"
                 ( _2 )
# 284 "parser_graphe.ml"
               : 'texte))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'texte) in
    Obj.repr(
# 54 "parser_graphe.mly"
                 ( _2 )
# 291 "parser_graphe.ml"
               : 'texte))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser_graphe.mly"
                 ( [] )
# 297 "parser_graphe.ml"
               : 'texte))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'clause) in
    Obj.repr(
# 59 "parser_graphe.mly"
                     ( (_2::(_3::_4)) )
# 306 "parser_graphe.ml"
               : 'clause))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser_graphe.mly"
                        ( [] )
# 312 "parser_graphe.ml"
               : 'clause))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : int list)
