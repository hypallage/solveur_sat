*-------------*
| LISEZ MOI ! |
*-------------*

Cette archive contient notre premier rendu de projet 1, qui contient
la version de base de l'algorithme DPLL.
Ce fichier "Lisez-moi" detaille la repartition du travail, 
l'organisation u code

*-----------------------------*
| I] Repartition du travail : |
*-----------------------------*

Durant les premieres seances, nous nous sommes mis d'accord sur les 
structures de donnees principales ( clauses ... ) et annexes ( aide
pour que le programme aille plus vite), puis sur le partage des 
taches. 
Nous avons simplement delimite les differentes parties de l'algorithme
nous nous sommes equitablement reparti ces phases. 
Pour Patrice :
- la partie propagation : c'est une partie importante dans laquelle 
les differentes fonctions sont tres interdependantes, nous avons
donc choisi qu'une seule personne s'occupe de cette partie.
Pour William :
- le pretraitement : parser, lexer, gestion des tautologies, clauses 
incluses dans d'autres... tout ce qui ne sera execute qu'une seule 
fois ;
- l'affichage du resultat.
Enfin, nous avons travaille ensemble sur la fusion de nos differents
 travaux lors des derniers jours avant la dead-line.

*----------------------------*
| II] Organisation du code : |
*----------------------------*
L'organisation du code suit a la lettre les differentes phases de 
l'algorithme decrites precedemment. Nous avons donc ( outre parser 
et lexer ) 5 fichiers .ml :
- atomes.ml ( les foncions intervenant dans differentes parties )
- pretraitement.ml
- propagation.ml
- pari_backtracking.ml
- types.ml

*-------------------------------*
| III] Choix d'implementation : |
*-------------------------------*

Nous detaillerons ici les principaux choix d'implementation qui ont ete
effectues, notamment sur les structures de donnees primaires ( clause,
formule ...) ainsi que les structures de donnees annexes.

a)Clauses,formules,paris

Sachant que les clauses ont une taille variable, nous avons choisi de les
representer par des listes d'entiers x1...xn telles que cette liste contient
les variables qui apparaissent ainsi que leur polarite.
Exemple : not(x1) ou x2 ou x4 -----> [-1;2;4] 
Remarque : ces listes sont triees lors du pretraitement.

Pour les formules, leur taille ne va pas varier, nous utilisons donc des 
tableaux de clauses.

Pour gerer les paris, nous utilisons une liste de couples de la forme
(n,csqcs) ou n est la donnee de la variable sur laquelle on a parie 
ainsi que sa polarite, et csqcs contient la liste des consequences que
cette affectation a induit sur les autres variables.

Nous detaillons maintenant les structures de donnees annexes :
- nombre de variables pour chaque clause ( ne bouge jamais )
- nombre de variables actuellement a faux dans chaque clause : permet de 
tester facilement si on a des conflits ou des clauses reduites a un littéral
non encore à faux
- clauses satisfaites/pas encore satisfaites
- 4 tableaux qui a chaque variable associe les noms des clauses dans lesquelles
 la variable apparait positivement(respectivement negativement) de facon
activee( respectivement desactivee)

*---------------------------------*
| IV] Remarques complementaires : |
*---------------------------------*

a) Fichiers de tests :

Nous avons integre des fichiers de tests contenant des tests simples, dont nous 
pouvons prevoir a la fois le resultat et le deroulement de l'algorithme (notamment lors
de nos _ nombreux _ debuggages ); ainsi que les tests du precedent DM. 

b) Comment lancer le programme :

1) pour compiler, lancer

make

2) puis taper 

chmod +x ./resol

3) pour executer le programme sur l'exemple ex.cnf, lancer

./calc ex.cnf

c) Difficultes/Ameliorations :

Nous avons conscience, vu notre niveau, que les structures de donnees que nous 
uilisees ne sont pas les plus performantes.
Beaucoup de debuggages ont du etre faits au dernier moment, il est fortement 
probable que l'algorithme ne fonctionne pas sur certaines instances.
Sur l'exemple, ex1.cnf on a l'execption clausevrai qui est la tentative de deduction à partir d'une clause vérifié.













